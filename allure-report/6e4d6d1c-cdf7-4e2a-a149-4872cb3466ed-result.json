{"name": "test_purchase_reverse", "status": "failed", "statusDetails": {"message": "AssertionError: UnExpected: status. Expected: 12. Actually: 8\nassert 8 == 12\n +  where 12 = transactionStatus.REVERSE", "trace": "self = <tests.Our_card.Card_gateway.Order.Reverse.Positive.test_reverse_purchase.TestReversePurchase object at 0x00000267323437C0>\nselect_value = <function select_value.<locals>._select_value at 0x0000026732C741F0>\n\n    @allure.feature(f'{positive_cases} Reverse Purchase')\n    def test_purchase_reverse(self, select_value):\n        with allure.step(f'{data_create} для Purchase'):\n            purchase_data = self.purchaseByPanExpiry(externalRef=None, pan=OURCARD.get_pan(), expiry=OURCARD.get_full_expiry(), amount=randint(101, 300), currency=currency.TJS)\n        with allure.step(send_request):\n            purchase_response = MyRequests.post(url=PURCHASE_URL, data=purchase_data)\n            allure.attach(json.dumps(purchase_data), name='Request:', attachment_type=attachment_type.JSON)\n            allure.attach(json.dumps(purchase_response.json()), name='Response:', attachment_type=attachment_type.JSON)\n        with allure.step(response_code):\n            Assertions.assert_code_status(purchase_response, statusCode.APPROVED)\n    \n        with allure.step('Сохранение id для валидации'):\n            purchase_id = purchase_response.json()['payload']['id']\n        with allure.step('Сохранение externalRef для валидации'):\n            purchase_externalRef = purchase_response.json()['payload']['externalRef']\n    \n        with allure.step(f'{data_create} для Reverse'):\n            reverse_data = self.reverse(externalRef=None, transactionExternalRef=purchase_externalRef, orderType=orderType.PURCHASE)\n        with allure.step(send_request):\n            reverse_response = MyRequests.post(url=REVERSE_URL, data=reverse_data)\n            allure.attach(json.dumps(reverse_data), name='Request:', attachment_type=attachment_type.JSON)\n            allure.attach(json.dumps(reverse_response.json()), name='Response:', attachment_type=attachment_type.JSON)\n    \n        with allure.step(response_code):\n            Assertions.assert_code_status(reverse_response, statusCode.APPROVED)\n    \n        with allure.step(\"БД: берём из БД из таблица Card_gateway->transaction, значение колонки: status для валидации\"):\n            purchase_status_in_db = select_value('status', 'transaction', 'id', purchase_id)[0]\n    \n        with allure.step(\"Проверка: status в БД равен 12 (reverse)\"):\n>           assert purchase_status_in_db == transactionStatus.REVERSE, \\\n                f\"UnExpected: status. Expected: {transactionStatus.REVERSE}. Actually: {purchase_status_in_db}\"\nE           AssertionError: UnExpected: status. Expected: 12. Actually: 8\nE           assert 8 == 12\nE            +  where 12 = transactionStatus.REVERSE\n\ntests\\Our_card\\Card_gateway\\Order\\Reverse\\Positive\\test_reverse_purchase.py:46: AssertionError"}, "steps": [{"name": "Создание тестовых данных для Purchase", "status": "passed", "start": 1704779552792, "stop": 1704779552792}, {"name": "Отправка запроса на API", "status": "passed", "attachments": [{"name": "Request:", "source": "dbb206a9-5c53-4c1b-9ad5-c8e99bd48eed-attachment.json", "type": "application/json"}, {"name": "Response:", "source": "3a76ca8b-4f14-41d0-b41c-d9b23febbab9-attachment.json", "type": "application/json"}], "start": 1704779552792, "stop": 1704779553709}, {"name": "Проверка: код из Response", "status": "passed", "start": 1704779553709, "stop": 1704779553709}, {"name": "Сохранение id для валидации", "status": "passed", "start": 1704779553709, "stop": 1704779553709}, {"name": "Сохранение externalRef для валидации", "status": "passed", "start": 1704779553709, "stop": 1704779553709}, {"name": "Создание тестовых данных для Reverse", "status": "passed", "start": 1704779553709, "stop": 1704779553709}, {"name": "Отправка запроса на API", "status": "passed", "attachments": [{"name": "Request:", "source": "5ebf0a16-d578-4667-a1af-1c334e17ffd0-attachment.json", "type": "application/json"}, {"name": "Response:", "source": "76d7453f-8758-4e9f-92bf-87e0ddb0e37a-attachment.json", "type": "application/json"}], "start": 1704779553709, "stop": 1704779554439}, {"name": "Проверка: код из Response", "status": "passed", "start": 1704779554439, "stop": 1704779554439}, {"name": "БД: берём из БД из таблица Card_gateway->transaction, значение колонки: status для валидации", "status": "passed", "start": 1704779554439, "stop": 1704779554541}, {"name": "Проверка: status в БД равен 12 (reverse)", "status": "failed", "statusDetails": {"message": "AssertionError: UnExpected: status. Expected: 12. Actually: 8\nassert 8 == 12\n +  where 12 = transactionStatus.REVERSE\n", "trace": "  File \"E:\\card_gateway\\tests\\Our_card\\Card_gateway\\Order\\Reverse\\Positive\\test_reverse_purchase.py\", line 46, in test_purchase_reverse\n    assert purchase_status_in_db == transactionStatus.REVERSE, \\\n"}, "start": 1704779554541, "stop": 1704779554542}], "start": 1704779552792, "stop": 1704779554543, "uuid": "9312bd6f-e6b1-4fa9-89b0-0de8b5c2db11", "historyId": "bf152ef4885022da4666f011810a5dd2", "testCaseId": "bf152ef4885022da4666f011810a5dd2", "fullName": "tests.Our_card.Card_gateway.Order.Reverse.Positive.test_reverse_purchase.TestReversePurchase#test_purchase_reverse", "labels": [{"name": "feature", "value": "[POSITIVE] cases - Reverse Purchase"}, {"name": "owner", "value": "Rustam Saidov"}, {"name": "parentSuite", "value": "tests.Our_card.Card_gateway.Order.Reverse.Positive"}, {"name": "suite", "value": "test_reverse_purchase"}, {"name": "subSuite", "value": "TestReversePurchase"}, {"name": "host", "value": "Saidov-Rustam"}, {"name": "thread", "value": "10116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Our_card.Card_gateway.Order.Reverse.Positive.test_reverse_purchase"}]}